- name: Deploy InTheOfficeBot
  hosts: all
  become: true
  remote_user: ubuntu
  vars:
    ansible_python_interpreter: /usr/bin/python3.12 
    dir: "{{ APP_PATH }}"
    app_name: "InTheOfficeBot"
    git_repo: "git@github.com:golovko/InTheOffice.git"
    git_branch: "main"
    dotnet_sdk_version: "8.0"
    app_path: "{{ dir }}/InTheOffice"
    publish_folder: "{{ app_path }}/publish"
    service_name: "{{ app_name }}.service"
    service_port: 5000
    environment_vars:
      - key: "BOT_TOKEN"
        value: "{{ lookup('env', 'BOT_TOKEN') }}"
      - key: "CONNECTION_STRING"
        value: "{{ lookup('env', 'CONNECTION_STRING') }}"
    # roles:
    # - git_pull
      # - role: deploy_service
    # - docker_restart
  tasks:
    - name: Publish the .NET app
      shell: |
        dotnet publish -c Release -o {{ publish_folder }}
      args:
        chdir: "{{ app_path/InTheOfficeBot }}"

    - name: Create systemd service file for the .NET app
      copy:
        dest: "/etc/systemd/system/{{ service_name }}"
        content: |
          [Unit]
          Description={{ app_name }} .NET App
          After=network.target

          [Service]
          WorkingDirectory={{ publish_folder }}
          ExecStart=/usr/bin/dotnet {{ publish_folder }}/{{ app_name }}.dll
          Restart=always
          RestartSec=10
          KillSignal=SIGINT
          SyslogIdentifier=dotnet-{{ app_name }}
          User=ubuntu
          Environment=ASPNETCORE_ENVIRONMENT=Production
          {% for var in environment_vars %}
          Environment={{ var.key }}={{ var.value }}
          {% endfor %}
          Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd to recognize new service
      systemd:
        daemon_reload: yes

    - name: Start and enable the .NET service
      systemd:
        name: "{{ service_name }}"
        enabled: yes
        state: started

    - name: Open firewall for app service (optional)
      ufw:
        rule: allow
        port: "{{ service_port }}"
        proto: tcp  